package com.bigcustard.silverbars.model;

import java.math.BigDecimal;
import java.util.Objects;

import static com.bigcustard.silverbars.model.BuyOrSell.SELL;

public final class Bid implements Comparable<Bid> {

    private final BuyOrSell buyOrSell;
    private final BigDecimal pricePerKg;

    public Bid(BuyOrSell buyOrSell, BigDecimal pricePerKg) {

        Objects.requireNonNull(buyOrSell, "Parameter buyOrSell must not be null");
        Objects.requireNonNull(pricePerKg, "Parameter pricePerKg must not be null");

        if(pricePerKg.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("Parameter pricePerKg must be greater than zero");
        }

        this.buyOrSell = buyOrSell;
        this.pricePerKg = pricePerKg;
    }

    public BuyOrSell getBuyOrSell() {

        return buyOrSell;
    }

    public BigDecimal getPricePerKg() {

        return pricePerKg;
    }

    @Override
    public boolean equals(Object o) {

        // Generated by IntelliJ
        if (this == o) return true;
        if (!(o instanceof Bid)) return false;

        Bid bid = (Bid) o;

        if (buyOrSell != bid.buyOrSell) return false;
        return pricePerKg.equals(bid.pricePerKg);

    }

    @Override
    public int hashCode() {

        return pricePerKg.hashCode() * BuyOrSell.values().length + buyOrSell.ordinal();
    }

    @Override
    public int compareTo(Bid other) {

        return this.buyOrSell != other.buyOrSell ? buyOrSell.compareTo(other.buyOrSell) // Put BUYs before SELLs
                                                 : comparePrice(other.pricePerKg); // Within BUYs or SELLs, sort by price
    }

    private int comparePrice(BigDecimal otherPricePerKg) {

        int result = pricePerKg.compareTo(otherPricePerKg);
        return buyOrSell == SELL ? result : -result;
    }
}
