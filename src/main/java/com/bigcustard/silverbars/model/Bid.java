package com.bigcustard.silverbars.model;

import static com.bigcustard.silverbars.model.BuyOrSell.SELL;

public final class Bid implements Comparable<Bid> {

    private final BuyOrSell buyOrSell;
    private final int pencePerKg; // Prices held in pence to avoid rounding issues.

    public Bid(BuyOrSell buyOrSell, int pencePerKg) {

        if(buyOrSell == null) {
            throw new IllegalArgumentException("BuyOrSell must not be null");
        }

        if(pencePerKg <= 0) {
            throw new IllegalArgumentException("Price must be greater than zero");
        }

        this.buyOrSell = buyOrSell;
        this.pencePerKg = pencePerKg;
    }

    public BuyOrSell getBuyOrSell() {

        return buyOrSell;
    }

    public int getPencePerKg() {

        return pencePerKg;
    }

    @Override
    public boolean equals(Object o) {

        // Generated by IntelliJ
        if (this == o) return true;
        if (!(o instanceof Bid)) return false;

        Bid bid = (Bid) o;

        return pencePerKg == bid.pencePerKg && buyOrSell == bid.buyOrSell;

    }

    @Override
    public int hashCode() {

        return pencePerKg * BuyOrSell.values().length + buyOrSell.ordinal();
    }

    @Override
    public int compareTo(Bid other) {

        return this.buyOrSell != other.buyOrSell ? buyOrSell.compareTo(other.buyOrSell) // Put BUYs before SELLs
                                                 : comparePrice(other.pencePerKg); // Within BUYs or SELLs, sort by price
    }

    private int comparePrice(int otherPencePerKg) {

        int result = Integer.compare(pencePerKg, otherPencePerKg);
        return buyOrSell == SELL ? result : -result;
    }
}
